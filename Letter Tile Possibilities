You have n  tiles, where each tile has one letter tiles[i] printed on it.

Return the number of possible non-empty sequences of letters you can make using the letters printed on those tiles.

 

Example 1:

Input: tiles = "AAB"
Output: 8
Explanation: The possible sequences are "A", "B", "AA", "AB", "BA", "AAB", "ABA", "BAA".
Example 2:

Input: tiles = "AAABBC"
Output: 188
Example 3:

Input: tiles = "V"
Output: 1
 

Constraints:

1 <= tiles.length <= 7
tiles consists of uppercase English letters.

// Source Code

class Solution {
public:
    int backtrack(unordered_map<char, int>& freq) {
        int count = 0;
        for (auto& [ch, val] : freq) {
            if (val > 0) {
                count++;  // Count current sequence
                freq[ch]--;  // Use this letter
                count += backtrack(freq);  // Recur with reduced frequency
                freq[ch]++;  // Backtrack
            }
        }
        return count;
    }

    int numTilePossibilities(string tiles) {
        unordered_map<char, int> freq;
        for (char ch : tiles) {
            freq[ch]++;  // Count letter occurrences
        }
        return backtrack(freq);
    }
};
