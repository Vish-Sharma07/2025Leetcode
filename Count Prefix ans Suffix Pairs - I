class Solution {
public:
    int countPrefixSuffixPairs(vector<string>& words) {
        int count = 0;
        unordered_map<string, int> prefixMap;
        
        // Iterate through each word
        for (const string& word : words) {
            int n = word.size();
            
            // Generate prefixes and suffixes
            for (int i = 1; i <= n; ++i) {
                string prefix = word.substr(0, i);
                string suffix = word.substr(n - i, i);
                
                // If prefix is already seen, increment count for matching suffix
                if (prefixMap.count(suffix)) {
                    count += prefixMap[suffix];
                }
            }
            
            // Store the current word's prefix for future matches
            prefixMap[word]++;
        }
        
        return count;
    }
};
